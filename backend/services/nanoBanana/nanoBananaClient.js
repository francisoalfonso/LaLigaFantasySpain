/**
 * Nano Banana Client (KIE.ai) - Ana Mart√≠nez Character System
 *
 * Sistema de generaci√≥n de im√°genes realistas de Ana Mart√≠nez usando
 * Gemini 2.5 Flash Image (Nano Banana) v√≠a KIE.ai API con referencias m√∫ltiples.
 *
 * Documentaci√≥n: docs/presentadores-BASE ANA - NANOBANANA/guia_nanobanana_KIEAI_ana_martinez.md
 *
 * CARACTER√çSTICAS CLAVE:
 * ‚úÖ 5 im√°genes de referencia (4 vistas Ana + 1 estudio FLP)
 * ‚úÖ Seed fijo 12500 para consistencia total
 * ‚úÖ Prompt strength 0.8 (equilibrio identidad/entorno)
 * ‚úÖ Integraci√≥n total con estudio FLP (ne√≥n rojo + pantallas)
 * ‚úÖ Piel realista sin look 3D/pl√°stico
 *
 * Pricing KIE.ai: $0.02 por imagen
 *
 * IMPORTANTE: Este sistema usa 'image_urls' (array de URLs p√∫blicas)
 *             NO 'referenced_image_ids' (solo para API core de Google)
 */

const axios = require('axios');
const logger = require('../../utils/logger');

// Configuraci√≥n FLP con estructura flp/ana/, flp/estudio/, flp/kits/
// Generada por check-buckets-and-reorganize.js (Oct 2025)
const FLP_CONFIG = require('../../../data/flp-nano-banana-config.json');

class NanoBananaClient {
    constructor() {
        // API Key de KIE.ai
        this.apiKey = process.env.KIE_AI_API_KEY;
        this.baseUrl = 'https://api.kie.ai/api/v1';

        if (!this.apiKey) {
            throw new Error('KIE_AI_API_KEY no configurada en .env');
        }

        // Endpoints de KIE.ai
        this.createTaskEndpoint = '/playground/createTask';
        this.recordInfoEndpoint = '/playground/recordInfo';

        // Configuraci√≥n de Ana Mart√≠nez (desde flp-nano-banana-config.json)
        this.anaConfig = {
            seed: FLP_CONFIG.seed || 12500,
            promptStrength: FLP_CONFIG.prompt_strength || 0.75,
            model: FLP_CONFIG.model || 'google/nano-banana-edit',
            imageSize: FLP_CONFIG.image_size || '9:16', // CRITICAL: Fuerza formato vertical 576x1024
            outputFormat: FLP_CONFIG.output_format || 'png',
            transparentBackground: FLP_CONFIG.transparent_background || false
        };

        // URLs de referencias para Nano Banana
        // Orden: 4 Ana + 1 estudio (estudio al final)
        // El aspect ratio se fuerza con image_size: "9:16" (no depende del orden)
        this.anaReferenceUrls = [
            ...FLP_CONFIG.ana_references.map(ref => ref.url),
            FLP_CONFIG.estudio.url
        ];

        // Informaci√≥n de kits disponibles (para cambio de camiseta)
        this.availableKits = FLP_CONFIG.kits || [];

        logger.info('[NanoBananaClient] ‚úÖ Cliente inicializado (Ana Mart√≠nez System)');
        logger.info(`[NanoBananaClient] Referencias: ${this.anaReferenceUrls.length} im√°genes`);
        logger.info(`[NanoBananaClient] Seed: ${this.anaConfig.seed}`);
        logger.info(`[NanoBananaClient] Prompt strength: ${this.anaConfig.promptStrength}`);
        logger.info('[NanoBananaClient] Pricing: $0.02/imagen');
    }

    /**
     * Generar im√°genes de Ana con progresi√≥n cinematogr√°fica
     *
     * SISTEMA ACTUALIZADO (Oct 2025):
     * - Usa 5 referencias m√∫ltiples (4 vistas Ana + 1 estudio)
     * - Seed fijo 12500 para consistencia absoluta
     * - Variaciones solo en planos y expresiones (NO en identidad)
     *
     * Progresi√≥n: Wide Shot ‚Üí Medium Shot ‚Üí Close-Up
     * - Segmento 1 (Hook): Wide shot - establece escenario
     * - Segmento 2 (Desarrollo): Medium shot - acercamiento natural
     * - Segmento 3 (CTA): Close-up - intimidad y urgencia
     *
     * @param {object} options - Opciones de generaci√≥n
     * @returns {Promise<Array>} - Array de 3 objetos con URLs de im√°genes
     */
    async generateAnaProgression(options = {}) {
        const {
            _style = 'professional',
            progression = 'wide-medium-closeup',
            _dialogue = null // Opcional: di√°logo espec√≠fico para cada segmento
        } = options;

        logger.info('[NanoBananaClient] üé® Iniciando generaci√≥n de 3 im√°genes Ana...');
        logger.info(`[NanoBananaClient] Progresi√≥n: ${progression}`);
        logger.info(`[NanoBananaClient] Referencias: ${this.anaReferenceUrls.length} im√°genes`);

        // Prompt base de Ana - CONFIGURACI√ìN DEFINITIVA VALIDADA (Oct 10, 2025)
        // PROMPT EXACTO DEL TEST EXITOSO - NO MODIFICAR
        // Menos texto = m√°s realismo, menos aspecto 3D/render
        // ‚úÖ CR√çTICO (Oct 11): "green-hazel eyes" a√±adido para mantener color original de Ana
        const anaBasePrompt = `ultra realistic cinematic portrait of Ana Mart√≠nez presenting inside the FLP studio, same woman as in the reference images, same face with green-hazel eyes, hairstyle and red FLP polo shirt, integrated with the studio lighting and reflections, very soft red neon glow from the FLP sign behind her, reflecting faintly on the right edge of her face only, no red color cast on hair, maintain natural blonde hair color, balanced neutral white balance, gentle blue monitor reflections on left side, realistic soft shadows and light diffusion, cinematic tone, Canon EOS R5 85mm f1.4 lens, shallow depth of field, film grain, authentic human skin texture, no CGI, no render, no plastic skin, confident professional expression`;

        // Negative prompt detallado para evitar reflejos rojizos en pelo
        const negativePrompt = `no red tint on hair, no red highlights on hair, no strong color reflections, no magenta tone on face, no HDR, no 3D render, no composite lighting mismatch, no overexposed red areas, no fake reflections`;

        // Definir 3 prompts con SOLO variaci√≥n de plano cinematogr√°fico
        // IMPORTANTE: Mantener prompts cortos para evitar aspecto 3D/render
        const prompts = [
            {
                index: 1,
                shot: 'wide',
                segmentRole: 'hook',
                prompt: anaBasePrompt, // Sin a√±adir texto extra
                seed: this.anaConfig.seed // Seed fijo
            },
            {
                index: 2,
                shot: 'medium',
                segmentRole: 'development',
                prompt: anaBasePrompt, // Sin a√±adir texto extra
                seed: this.anaConfig.seed + 1 // Variaci√≥n m√≠nima (+1 para microcambios naturales)
            },
            {
                index: 3,
                shot: 'close-up',
                segmentRole: 'cta',
                prompt: anaBasePrompt, // Sin a√±adir texto extra
                seed: this.anaConfig.seed + 2 // Variaci√≥n m√≠nima (+2)
            }
        ];

        const images = [];
        const startTime = Date.now();

        for (let i = 0; i < prompts.length; i++) {
            const { index, shot, segmentRole, prompt, seed } = prompts[i];

            try {
                logger.info(
                    `[NanoBananaClient] üì∏ Generando imagen ${index}/3 (${shot} - ${segmentRole})...`
                );
                logger.info(`[NanoBananaClient]    Seed: ${seed}`);

                // DEBUG: Log del payload que vamos a enviar
                const payload = {
                    model: this.anaConfig.model,
                    input: {
                        prompt: prompt,
                        negative_prompt: negativePrompt,
                        image_urls: this.anaReferenceUrls,
                        output_format: this.anaConfig.outputFormat,
                        image_size: this.anaConfig.imageSize, // "9:16" fuerza vertical 576x1024
                        seed: seed,
                        prompt_strength: this.anaConfig.promptStrength,
                        transparent_background: this.anaConfig.transparentBackground,
                        n: 1
                    }
                };

                console.log('\n=== PAYLOAD A ENVIAR ===');
                console.log(JSON.stringify(payload, null, 2));
                console.log('=========================\n');

                // 1. Crear tarea de generaci√≥n en KIE.ai
                const createResponse = await axios.post(
                    `${this.baseUrl}${this.createTaskEndpoint}`,
                    {
                        model: this.anaConfig.model,
                        input: {
                            prompt: prompt,
                            negative_prompt: negativePrompt,
                            image_urls: this.anaReferenceUrls, // ‚úÖ CR√çTICO: Array de URLs (no referenced_image_ids)
                            output_format: this.anaConfig.outputFormat,
                            image_size: this.anaConfig.imageSize, // ‚úÖ CR√çTICO: "9:16" fuerza vertical 576x1024
                            seed: seed,
                            prompt_strength: this.anaConfig.promptStrength,
                            transparent_background: this.anaConfig.transparentBackground,
                            n: 1
                        }
                    },
                    {
                        headers: {
                            Authorization: `Bearer ${this.apiKey}`,
                            'Content-Type': 'application/json'
                        },
                        timeout: 30000
                    }
                );

                // DEBUG: Loggear respuesta completa CON CONSOLE.LOG (Winston puede estar filtrando)
                console.log('\n=== DEBUG: RESPONSE DE CREATE TASK ===');
                console.log('Status:', createResponse.status);
                console.log('Data completo:', JSON.stringify(createResponse.data, null, 2));
                console.log('=====================================\n');

                logger.info('[NanoBananaClient] üìã Response status:', createResponse.status);
                logger.info(
                    '[NanoBananaClient] üìã Response data:',
                    JSON.stringify(createResponse.data, null, 2)
                );

                // Extraer taskId
                const taskId = createResponse.data?.data?.taskId;

                if (!taskId) {
                    console.error('\n=== ERROR: NO TASK_ID ===');
                    console.error('createResponse.data:', createResponse.data);
                    console.error('createResponse.data.data:', createResponse.data?.data);
                    console.error('==========================\n');

                    logger.error('[NanoBananaClient] ‚ùå No se encontr√≥ task_id');
                    logger.error(
                        '[NanoBananaClient] Response data:',
                        JSON.stringify(createResponse.data, null, 2)
                    );
                    throw new Error('No se recibi√≥ task_id en respuesta de createTask');
                }

                logger.info(`[NanoBananaClient] Task creada: ${taskId}, esperando generaci√≥n...`);

                // 2. Polling para esperar que la imagen se genere
                let imageUrl = null;
                let attempts = 0;
                const maxAttempts = 60; // 60 intentos √ó 3s = 180s max (aumentado para Nano Banana API lenta)

                while (!imageUrl && attempts < maxAttempts) {
                    attempts++;

                    // Esperar 3 segundos antes de cada intento (excepto el primero)
                    if (attempts > 1) {
                        await this.sleep(3000);
                    }

                    const statusResponse = await axios.get(
                        `${this.baseUrl}${this.recordInfoEndpoint}`,
                        {
                            params: { taskId: taskId },
                            headers: {
                                Authorization: `Bearer ${this.apiKey}`
                            },
                            timeout: 15000
                        }
                    );

                    const data = statusResponse.data?.data;
                    const state = data?.state;
                    const resultJson = data?.resultJson;

                    logger.info(
                        `[NanoBananaClient] Intento ${attempts}/${maxAttempts}: State = ${state}`
                    );

                    if (state === 'success') {
                        // Parsear resultJson para obtener URL
                        const result = JSON.parse(resultJson);
                        imageUrl = result?.resultUrls?.[0];
                        if (!imageUrl) {
                            throw new Error('No se encontr√≥ URL en resultJson');
                        }
                        break;
                    } else if (state === 'failed' || state === 'fail') {
                        // KIE.ai puede devolver 'fail' o 'failed'
                        const errorMsg = data?.failMsg || 'Generaci√≥n de imagen fall√≥ en servidor';
                        throw new Error(errorMsg);
                    }
                    // Si state es 'queuing' o 'generating', continuar polling
                }

                if (!imageUrl) {
                    throw new Error(
                        `Timeout esperando generaci√≥n despu√©s de ${maxAttempts} intentos`
                    );
                }

                images.push({
                    index: index,
                    shot: shot,
                    segmentRole: segmentRole,
                    url: imageUrl,
                    prompt: prompt,
                    seed: seed,
                    referenceCount: this.anaReferenceUrls.length,
                    generatedAt: new Date().toISOString()
                });

                logger.info(`[NanoBananaClient] ‚úÖ Imagen ${index} generada exitosamente`);
                logger.info(`[NanoBananaClient]    URL: ${imageUrl.substring(0, 80)}...`);

                // Cooling period entre generaciones (evitar rate limiting)
                if (i < prompts.length - 1) {
                    logger.info('[NanoBananaClient] ‚è≥ Cooling 3s antes de siguiente imagen...');
                    await this.sleep(3000);
                }
            } catch (error) {
                console.error('\n=== ERROR CAPTURADO ===');
                console.error('Message:', error.message);
                console.error('Response Status:', error.response?.status);
                console.error('Response Data:', JSON.stringify(error.response?.data, null, 2));
                console.error(
                    'Request Config:',
                    JSON.stringify(
                        {
                            url: error.config?.url,
                            method: error.config?.method,
                            headers: error.config?.headers
                        },
                        null,
                        2
                    )
                );
                console.error('========================\n');

                logger.error(`[NanoBananaClient] ‚ùå Error generando imagen ${index}:`, {
                    error: error.message,
                    status: error.response?.status,
                    data: error.response?.data
                });
                throw new Error(`Failed to generate image ${index} (${shot}): ${error.message}`);
            }
        }

        const duration = ((Date.now() - startTime) / 1000).toFixed(1);
        const totalCost = images.length * 0.02;

        logger.info(`[NanoBananaClient] ‚úÖ 3 im√°genes Ana generadas exitosamente`);
        logger.info(`[NanoBananaClient] ‚è±Ô∏è  Duraci√≥n: ${duration}s`);
        logger.info(`[NanoBananaClient] üí∞ Costo: $${totalCost.toFixed(3)}`);
        logger.info(`[NanoBananaClient] üìä Sistema: Ana Mart√≠nez (seed ${this.anaConfig.seed})`);

        return images;
    }

    /**
     * Generar UNA imagen espec√≠fica de Ana (para testing o casos especiales)
     *
     * @param {object} options - Opciones de generaci√≥n
     * @returns {Promise<object>} - Objeto con URL de imagen
     */
    async generateSingleImage(options = {}) {
        const {
            shot = 'medium',
            _expression = 'professional confident',
            customPrompt = null,
            seed = this.anaConfig.seed
        } = options;

        logger.info(`[NanoBananaClient] üì∏ Generando imagen individual (${shot})...`);

        // Usar el MISMO prompt base que en generateAnaProgression (sin a√±adidos)
        // A√±adir texto extra causa aspecto 3D/render
        // ‚úÖ CR√çTICO (Oct 11): "green-hazel eyes" a√±adido para mantener color original de Ana
        const basePrompt =
            customPrompt ||
            `ultra realistic cinematic portrait of Ana Mart√≠nez presenting inside the FLP studio, same woman as in the reference images, same face with green-hazel eyes, hairstyle and red FLP polo shirt, integrated with the studio lighting and reflections, very soft red neon glow from the FLP sign behind her, reflecting faintly on the right edge of her face only, no red color cast on hair, maintain natural blonde hair color, balanced neutral white balance, gentle blue monitor reflections on left side, realistic soft shadows and light diffusion, cinematic tone, Canon EOS R5 85mm f1.4 lens, shallow depth of field, film grain, authentic human skin texture, no CGI, no render, no plastic skin, confident professional expression`;

        const negativePrompt = `no red tint on hair, no red highlights on hair, no strong color reflections, no magenta tone on face, no HDR, no 3D render, no composite lighting mismatch, no overexposed red areas, no fake reflections`;

        // DEBUG
        console.log('\n=== GENERATE SINGLE IMAGE - PAYLOAD ===');
        console.log('Modelo:', this.anaConfig.model);
        console.log('Prompt:', `${basePrompt.substring(0, 100)}...`);
        console.log('Referencias:', this.anaReferenceUrls.length);
        console.log('Seed:', seed);
        console.log('========================================\n');

        try {
            const createResponse = await axios.post(
                `${this.baseUrl}${this.createTaskEndpoint}`,
                {
                    model: this.anaConfig.model,
                    input: {
                        prompt: basePrompt,
                        negative_prompt: negativePrompt,
                        image_urls: this.anaReferenceUrls,
                        output_format: this.anaConfig.outputFormat,
                        image_size: this.anaConfig.imageSize, // ‚úÖ CR√çTICO: "9:16" fuerza vertical 576x1024
                        seed: seed,
                        prompt_strength: this.anaConfig.promptStrength,
                        transparent_background: false,
                        n: 1
                    }
                },
                {
                    headers: {
                        Authorization: `Bearer ${this.apiKey}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 30000
                }
            );

            // DEBUG: Ver respuesta completa
            console.log('\n=== RESPONSE DE CREATE TASK (SINGLE) ===');
            console.log('Status:', createResponse.status);
            console.log('Data:', JSON.stringify(createResponse.data, null, 2));
            console.log('=========================================\n');

            const taskId = createResponse.data?.data?.taskId;
            if (!taskId) {
                console.error('ERROR: taskId no encontrado');
                console.error('createResponse.data:', createResponse.data);
                console.error('createResponse.data.data:', createResponse.data?.data);
                throw new Error('No se recibi√≥ task_id');
            }

            // Polling
            let imageUrl = null;
            let attempts = 0;
            const maxAttempts = 60; // 60 intentos √ó 3s = 180s max (aumentado para Nano Banana API lenta)

            while (!imageUrl && attempts < maxAttempts) {
                attempts++;
                if (attempts > 1) {
                    await this.sleep(3000);
                }

                const statusResponse = await axios.get(
                    `${this.baseUrl}${this.recordInfoEndpoint}`,
                    {
                        params: { taskId },
                        headers: { Authorization: `Bearer ${this.apiKey}` },
                        timeout: 15000
                    }
                );

                const data = statusResponse.data?.data;
                const state = data?.state;

                if (state === 'success') {
                    const result = JSON.parse(data.resultJson);
                    imageUrl = result?.resultUrls?.[0];
                    break;
                } else if (state === 'failed') {
                    throw new Error(data?.failMsg || 'Generaci√≥n fall√≥');
                }
            }

            if (!imageUrl) {
                throw new Error('Timeout esperando generaci√≥n');
            }

            logger.info(`[NanoBananaClient] ‚úÖ Imagen generada: ${imageUrl}`);

            return {
                url: imageUrl,
                shot,
                seed,
                prompt: basePrompt,
                generatedAt: new Date().toISOString()
            };
        } catch (error) {
            console.error('\n=== ERROR EN SINGLE IMAGE ===');
            console.error('Message:', error.message);
            console.error('Response Status:', error.response?.status);
            console.error('Response Data:', JSON.stringify(error.response?.data, null, 2));
            console.error('Stack:', error.stack);
            console.error('==============================\n');

            logger.error('[NanoBananaClient] ‚ùå Error generando imagen:', error.message);
            throw error;
        }
    }

    /**
     * Sleep helper para cooling periods y polling
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * Validar configuraci√≥n del cliente
     */
    async healthCheck() {
        try {
            logger.info('[NanoBananaClient] üè• Health check...');

            if (!this.apiKey) {
                throw new Error('API Key no configurada');
            }

            if (!this.anaReferenceUrls || this.anaReferenceUrls.length === 0) {
                throw new Error('No hay im√°genes de referencia configuradas');
            }

            logger.info('[NanoBananaClient] ‚úÖ Health check OK');
            return {
                configured: true,
                model: this.anaConfig.model,
                seed: this.anaConfig.seed,
                references: this.anaReferenceUrls.length,
                promptStrength: this.anaConfig.promptStrength,
                imageSize: this.anaConfig.imageSize,
                pricing: '$0.020/imagen'
            };
        } catch (error) {
            logger.error('[NanoBananaClient] ‚ùå Health check fall√≥:', error.message);
            return {
                configured: false,
                error: error.message
            };
        }
    }

    /**
     * Obtener informaci√≥n de configuraci√≥n actual
     */
    getConfig() {
        return {
            seed: this.anaConfig.seed,
            promptStrength: this.anaConfig.promptStrength,
            model: this.anaConfig.model,
            imageSize: this.anaConfig.imageSize,
            references: this.anaReferenceUrls,
            referenceCount: this.anaReferenceUrls.length
        };
    }

    /**
     * ‚úÖ NUEVO (10 Oct 2025): Generar imagen contextualizada con prompt personalizado
     * Para integraci√≥n con UnifiedScriptGenerator ‚Üí Nano Banana ‚Üí VEO3
     *
     * @param {string} customPrompt - Prompt con contexto del segmento
     * @param {string} shotType - wide, medium, close-up
     * @param {object} options - Opciones adicionales
     * @returns {Promise<object>} - Imagen generada
     */
    async generateContextualImage(customPrompt, shotType, options = {}) {
        try {
            logger.info(`[NanoBananaClient] üé® Generando imagen contextualizada (${shotType})...`);
            logger.info(`[NanoBananaClient] Prompt: "${customPrompt.substring(0, 100)}..."`);

            const seed = options.seed || this.anaConfig.seed;

            // Negative prompt para evitar reflejos rojizos y aspecto 3D
            const negativePrompt = `no red tint on hair, no red highlights on hair, no strong color reflections, no magenta tone on face, no HDR, no 3D render, no composite lighting mismatch, no overexposed red areas, no fake reflections`;

            const payload = {
                model: this.anaConfig.model,
                input: {
                    prompt: customPrompt,
                    negative_prompt: negativePrompt,
                    image_urls: this.anaReferenceUrls,
                    output_format: this.anaConfig.outputFormat,
                    image_size: this.anaConfig.imageSize, // "9:16" vertical 576x1024
                    seed: seed,
                    prompt_strength: this.anaConfig.promptStrength,
                    transparent_background: false,
                    n: 1
                }
            };

            // 1. Crear tarea
            const createResponse = await axios.post(
                `${this.baseUrl}${this.createTaskEndpoint}`,
                payload,
                {
                    headers: {
                        Authorization: `Bearer ${this.apiKey}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 30000
                }
            );

            const taskId = createResponse.data?.data?.taskId;

            if (!taskId) {
                logger.error('[NanoBananaClient] ‚ùå No se recibi√≥ taskId');
                logger.error(
                    '[NanoBananaClient] Response:',
                    JSON.stringify(createResponse.data, null, 2)
                );
                throw new Error('No se recibi√≥ task_id en respuesta de createTask');
            }

            logger.info(`[NanoBananaClient] Task creada: ${taskId}, esperando generaci√≥n...`);

            // 2. Polling hasta que complete
            let imageUrl = null;
            let attempts = 0;
            const maxAttempts = 60; // 60 intentos √ó 3s = 180s max (aumentado para Nano Banana API lenta)

            while (!imageUrl && attempts < maxAttempts) {
                attempts++;

                if (attempts > 1) {
                    await this.sleep(3000);
                }

                const statusResponse = await axios.get(
                    `${this.baseUrl}${this.recordInfoEndpoint}`,
                    {
                        params: { taskId: taskId },
                        headers: {
                            Authorization: `Bearer ${this.apiKey}`
                        },
                        timeout: 15000
                    }
                );

                const data = statusResponse.data?.data;
                const state = data?.state;

                logger.info(
                    `[NanoBananaClient] Intento ${attempts}/${maxAttempts}: State = ${state}`
                );

                if (state === 'success') {
                    const result = JSON.parse(data.resultJson);
                    imageUrl = result?.resultUrls?.[0];

                    if (!imageUrl) {
                        throw new Error('No se encontr√≥ URL en resultJson');
                    }
                    break;
                } else if (state === 'failed' || state === 'fail') {
                    const errorMsg = data?.failMsg || 'Generaci√≥n de imagen fall√≥ en servidor';
                    throw new Error(errorMsg);
                }
            }

            if (!imageUrl) {
                throw new Error(`Timeout esperando generaci√≥n despu√©s de ${maxAttempts} intentos`);
            }

            logger.info(`[NanoBananaClient] ‚úÖ Imagen generada: ${imageUrl.substring(0, 80)}...`);

            return {
                url: imageUrl,
                shot: shotType,
                seed: seed,
                generatedAt: new Date().toISOString()
            };
        } catch (error) {
            logger.error(
                '[NanoBananaClient] ‚ùå Error generando imagen contextualizada:',
                error.message
            );
            throw error;
        }
    }
}

module.exports = NanoBananaClient;

/**
 * Test E2E: PromptBuilder Optimizado + Diccionario Progresivo
 *
 * Valida que el sistema completo funcione correctamente:
 * 1. Validaci√≥n de diccionario (crear si no existe)
 * 2. Generaci√≥n de prompt optimizado (solo apellido, sin equipo)
 * 3. Validaci√≥n seguridad VEO3
 * 4. Generaci√≥n de video (opcional)
 * 5. Actualizaci√≥n de tasa de √©xito
 */

const axios = require('axios');
const logger = require('../../backend/utils/logger');

// Configuraci√≥n de test
const BASE_URL = 'http://localhost:3000';
const TEST_PLAYER = {
    fullName: 'Iago Aspas',
    team: 'Celta de Vigo',
    price: 8.0,
    stats: {
        goals: 3,
        assists: 2,
        games: 5,
        rating: 7.5
    },
    ratio: 1.4
};

/**
 * Test completo E2E
 */
async function runE2ETest() {
    console.log('\n=================================================');
    console.log('üß™ TEST E2E: PromptBuilder Optimizado + Diccionario');
    console.log('=================================================\n');

    try {
        // 1. Verificar servidor activo
        console.log('1Ô∏è‚É£ Verificando servidor...');
        const healthCheck = await axios.get(`${BASE_URL}/api/veo3/health`);
        if (!healthCheck.data.success) {
            throw new Error('Servidor VEO3 no disponible');
        }
        console.log('‚úÖ Servidor activo\n');

        // 2. Verificar estado inicial del diccionario
        console.log('2Ô∏è‚É£ Estado inicial del diccionario...');
        const initialStats = await axios.get(`${BASE_URL}/api/veo3/dictionary/stats`);
        console.log(`üìä Jugadores en diccionario: ${initialStats.data.data.playerCount}`);
        console.log(`üìä Equipos en diccionario: ${initialStats.data.data.teamCount}`);
        console.log(`üìä Tasa √©xito promedio: ${(initialStats.data.data.avgSuccessRate * 100).toFixed(1)}%`);
        console.log(`üìä Total videos generados: ${initialStats.data.data.totalVideos}\n`);

        // 3. Test generaci√≥n de video (SIN ejecutar VEO3 - solo validar prompt)
        console.log('3Ô∏è‚É£ Generando prompt optimizado...');
        console.log(`   Jugador: ${TEST_PLAYER.fullName}`);
        console.log(`   Equipo: ${TEST_PLAYER.team}`);
        console.log(`   Precio: ${TEST_PLAYER.price}M\n`);

        // Construir request body
        const requestBody = {
            type: 'chollo',
            playerName: TEST_PLAYER.fullName,
            price: TEST_PLAYER.price,
            team: TEST_PLAYER.team,
            stats: TEST_PLAYER.stats,
            ratio: TEST_PLAYER.ratio,
            options: {
                veo3Options: {
                    skipGeneration: true // NO generar video real (solo validar)
                }
            }
        };

        console.log('üì§ Request Body:');
        console.log(JSON.stringify(requestBody, null, 2));
        console.log('');

        // Hacer request (puede fallar si skipGeneration no est√° implementado a√∫n)
        let videoResponse;
        try {
            videoResponse = await axios.post(`${BASE_URL}/api/veo3/generate-ana`, requestBody);
        } catch (error) {
            if (error.response) {
                console.log('‚ö†Ô∏è Error en generaci√≥n (esperado si skipGeneration no implementado):');
                console.log(`   Status: ${error.response.status}`);
                console.log(`   Message: ${error.response.data.message}`);
                console.log('');
            } else {
                throw error;
            }
        }

        // 4. Verificar prompt generado (si disponible)
        if (videoResponse && videoResponse.data.success) {
            const promptData = videoResponse.data.data.prompt;
            console.log('‚úÖ Prompt generado:');
            console.log(`   Texto: "${promptData.text.substring(0, 100)}..."`);
            console.log(`   Longitud: ${promptData.length} caracteres`);
            console.log(`   Warnings: ${promptData.validation ? promptData.validation.length : 0}`);
            console.log('');

            // Verificar que NO contiene equipo
            const containsTeam = promptData.text.includes('Celta') || promptData.text.includes('Vigo');
            const containsFullName = promptData.text.includes('Iago Aspas');

            console.log('üîç Validaci√≥n de optimizaci√≥n:');
            console.log(`   ‚ùå Contiene equipo (Celta/Vigo): ${containsTeam ? '‚ö†Ô∏è S√ç' : '‚úÖ NO'}`);
            console.log(`   ‚ùå Contiene nombre completo: ${containsFullName ? '‚ö†Ô∏è S√ç' : '‚úÖ NO'}`);
            console.log(`   ‚úÖ Solo apellido: ${!containsFullName && promptData.text.includes('Aspas') ? '‚úÖ S√ç' : '‚ùå NO'}`);
            console.log('');

            // Verificar diccionario actualizado
            if (videoResponse.data.data.dictionary) {
                const dictData = videoResponse.data.data.dictionary;
                console.log('üìã Datos del diccionario:');
                console.log(`   Jugador en diccionario: ${dictData.playerInDictionary ? '‚úÖ S√ç' : '‚ùå NO'}`);
                console.log(`   Tasa de √©xito: ${dictData.successRate}`);
                console.log(`   Total videos: ${dictData.totalVideos}`);
                console.log('');
            }
        }

        // 5. Verificar estado final del diccionario
        console.log('5Ô∏è‚É£ Estado final del diccionario...');
        const finalStats = await axios.get(`${BASE_URL}/api/veo3/dictionary/stats`);
        console.log(`üìä Jugadores en diccionario: ${finalStats.data.data.playerCount}`);
        console.log(`üìä Equipos en diccionario: ${finalStats.data.data.teamCount}`);
        console.log(`üìä Tasa √©xito promedio: ${(finalStats.data.data.avgSuccessRate * 100).toFixed(1)}%`);
        console.log(`üìä Total videos generados: ${finalStats.data.data.totalVideos}\n`);

        // 6. Resumen de cambios
        const playerCountChange = finalStats.data.data.playerCount - initialStats.data.data.playerCount;
        const teamCountChange = finalStats.data.data.teamCount - initialStats.data.data.teamCount;

        console.log('üìà Cambios en diccionario:');
        console.log(`   Jugadores agregados: ${playerCountChange > 0 ? `+${playerCountChange}` : playerCountChange}`);
        console.log(`   Equipos agregados: ${teamCountChange > 0 ? `+${teamCountChange}` : teamCountChange}`);
        console.log('');

        // Conclusi√≥n
        console.log('=================================================');
        console.log('‚úÖ TEST E2E COMPLETADO');
        console.log('=================================================\n');

        // Resultados esperados
        console.log('üìã RESULTADOS ESPERADOS:');
        console.log('');
        console.log('1. ‚úÖ Jugador "Iago Aspas" agregado al diccionario (si no exist√≠a)');
        console.log('2. ‚úÖ Equipo "Celta de Vigo" agregado al diccionario (si no exist√≠a)');
        console.log('3. ‚úÖ Prompt generado SIN mencionar equipo ("Celta" o "Vigo")');
        console.log('4. ‚úÖ Prompt usa solo apellido "Aspas" (no "Iago Aspas")');
        console.log('5. ‚úÖ Diccionario contiene referencias seguras para pr√≥ximas generaciones');
        console.log('');

        console.log('üìù PR√ìXIMOS PASOS:');
        console.log('');
        console.log('1. Ejecutar test V3 real: npm run veo3:test-retry-v3');
        console.log('2. Verificar tasa de √©xito actualizada en diccionario');
        console.log('3. Generar m√∫ltiples videos para validar consistencia');
        console.log('4. Monitorear dashboard: http://localhost:3000/veo3-resilience-dashboard.html');
        console.log('');

        process.exit(0);

    } catch (error) {
        console.error('\n‚ùå ERROR EN TEST E2E:');
        console.error(error.message);

        if (error.response) {
            console.error('\nRespuesta del servidor:');
            console.error(JSON.stringify(error.response.data, null, 2));
        }

        process.exit(1);
    }
}

// Ejecutar test
runE2ETest();

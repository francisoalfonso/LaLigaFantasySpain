/**
 * Test para verificar si ya estamos usando VEO3.1
 * (KIE.ai puede haber actualizado veo3_fast silenciosamente)
 */

require('dotenv').config();

const VEO3Client = require('../../backend/services/veo3/veo3Client');
const logger = require('../../backend/utils/logger');

async function testCurrentVEO3Version() {
    console.log('\nüîç TEST: ¬øEstamos usando VEO3 o VEO3.1?\n');

    const client = new VEO3Client();

    const testPrompt =
        'Ana, una analista deportiva espa√±ola de 32 a√±os con pelo negro rizado, habla en espa√±ol de Espa√±a: "Hola Misters, este es un test r√°pido de Fantasy La Liga." La persona de la imagen de referencia habla en espa√±ol de Espa√±a.';
    const testImage =
        'https://ixfowlkuypnfbrwawxlx.supabase.co/storage/v1/object/public/flp/ana/ana-peinido2-03.png';

    console.log('üìπ Generando video de prueba con veo3_fast...\n');

    try {
        const startTime = Date.now();

        // Generar video con modelo actual
        const response = await client.generateVideo(testPrompt, {
            model: 'veo3_fast',
            imageUrl: testImage,
            aspectRatio: '9:16',
            watermark: 'Fantasy La Liga Pro',
            enableTranslation: false
        });

        const requestDuration = Date.now() - startTime;

        if (response.code === 200) {
            console.log(`‚úÖ Video iniciado exitosamente`);
            console.log(`   TaskId: ${response.data.taskId}`);
            console.log(`   Request duration: ${requestDuration}ms\n`);

            // Esperar a que complete
            console.log('‚è≥ Esperando generaci√≥n completa (5-6 min)...\n');
            const video = await client.waitForCompletion(response.data.taskId, 600000);

            console.log(`‚úÖ Video completado: ${video.url}\n`);

            // Descargar para an√°lisis
            const outputPath = '/tmp/veo3_version_test.mp4';
            await client.downloadVideo(video.url, outputPath);

            console.log(`üíæ Video descargado: ${outputPath}\n`);

            // Analizar audio con FFprobe
            console.log('üîä Analizando audio...\n');
            const { exec } = require('child_process');
            const { promisify } = require('util');
            const execPromise = promisify(exec);

            try {
                const { stdout } = await execPromise(
                    `ffprobe -i "${outputPath}" -show_streams -select_streams a -loglevel error`
                );

                if (stdout && stdout.trim().length > 0) {
                    console.log('‚úÖ EL VIDEO TIENE AUDIO NATIVO\n');
                    console.log('üéâ ¬°Esto confirma que est√°s usando VEO3.1!\n');
                    console.log('Detalles del audio:');
                    console.log(stdout);
                    console.log(
                        '\nüìä CONCLUSI√ìN: KIE.ai actualiz√≥ veo3_fast a VEO3.1 autom√°ticamente\n'
                    );
                } else {
                    console.log('‚ùå El video NO tiene audio\n');
                    console.log('üìä CONCLUSI√ìN: A√∫n est√°s usando VEO3 (sin audio nativo)\n');
                }
            } catch (error) {
                console.log('‚ùå No se pudo analizar audio (probablemente no tiene)');
                console.log('üìä CONCLUSI√ìN: A√∫n est√°s usando VEO3 (sin audio nativo)\n');
            }

            // Test 2: Multi-imagen (feature de VEO3.1)
            console.log('\nüß™ Test 2: Multi-imagen (feature VEO3.1)...\n');

            const multiImageResponse = await client.generateVideo(testPrompt, {
                model: 'veo3_fast',
                imageUrls: [
                    testImage,
                    'https://raw.githubusercontent.com/laligafantasyspainpro-ux/imagenes-presentadores/main/ana-estudio.jpg'
                ],
                aspectRatio: '9:16',
                enableTranslation: false
            });

            if (multiImageResponse.code === 200) {
                console.log('‚úÖ Multi-imagen aceptado por API');
                console.log(`   TaskId: ${multiImageResponse.data.taskId}\n`);
                console.log('üìä Esto sugiere VEO3.1 (VEO3 solo acepta 1 imagen)\n');
            } else {
                console.log('‚ùå Multi-imagen rechazado');
                console.log(`   Error: ${multiImageResponse.msg}\n`);
                console.log('üìä Esto sugiere VEO3 (sin soporte multi-imagen)\n');
            }

            console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
            console.log('üìù RESUMEN:\n');
            console.log('   Video URL:', video.url);
            console.log('   Local path:', outputPath);
            console.log('\n   Verifica manualmente:');
            console.log('   1. Abre el video y reproduce');
            console.log('   2. ¬øAna habla con audio sincronizado?');
            console.log('   3. Si S√ç ‚Üí VEO3.1 activo ‚úÖ');
            console.log('   4. Si NO ‚Üí VEO3 todav√≠a ‚ùå\n');
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
        } else {
            console.log(`‚ùå Error generando video: ${response.msg}\n`);
        }
    } catch (error) {
        console.error('‚ùå Error en test:', error.message);
    }
}

testCurrentVEO3Version()
    .then(() => {
        console.log('‚úÖ Test completado\n');
        process.exit(0);
    })
    .catch(error => {
        console.error('‚ùå Error:', error);
        process.exit(1);
    });
